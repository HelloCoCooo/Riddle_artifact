== Validation Service

The validation service lets you _validate_ user input, such as forms or Ajax request payloads. The validation service
 reuses the http://beanvalidation.org/[Bean Validation 1.1] API, meaning it offers the
 http://docs.jboss.org/hibernate/beanvalidation/spec/1.1/api/javax/validation/Validator.html[Validator] as a service.

=== Retrieving the validation service and API

As said above, the validator service is based on Bean Validation 1.1. So it's API is the
http://docs.jboss.org/hibernate/beanvalidation/spec/1.1/api/[Bean Validation API]. The main entry point is the
`Validator` service that lets you validate beans or parameters. The
http://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html_single[Hibernate Validation documentation] provides
everything you need to know about the usage of the `validator`.

You can retrieve the `Validator` service as follows:

[source, java]
----
include::{sourcedir}/controllers/validation/ManualValidationController.java[tags=controller]
----

=== Available set of constraints

The Bean Validation specification defines a set of constraints defined in the
http://docs.jboss.org/hibernate/beanvalidation/spec/1.1/api/javax/validation/constraints/package-summary.html[javax
.validation.constraints] package:

[options="header"]
|===============
|Annotation|Supported data types|Use
|@AssertFalse|Boolean, boolean|Checks that the annotated element is false

|@AssertTrue|Boolean, boolean|Checks that the annotated element is true

|@DecimalMax(value=,inclusive=)|BigDecimal, BigInteger, CharSequence, byte, short, int, long and the respective
wrappers of the primitive types |Checks whether the annotated value is less than the specified maximum, when
inclusive=false. Otherwise whether the value is less than or equal to the specified maximum. The parameter value is the
string representation of the max value according to the BigDecimal string representation.

|@DecimalMin(value=,inclusive=)|BigDecimal, BigInteger, CharSequence, byte, short, int, long and the respective
wrappers of the primitive types|Checks whether the annotated value is larger than the specified minimum, when
inclusive=false. Otherwise whether the value is larger than or equal to the specified minimum. The parameter value is
the string representation of the min value according to the BigDecimal string representation.

|@Digits(integer=,fraction=)|BigDecimal, BigInteger, CharSequence, byte, short, int, long and the respective wrappers of
 the primitive types|Checks whether the annotated value is a number having up to +integer+ digits and +fraction+
 fractional digits

|@Future|java.util.Date, java.util.Calendar, java.time.chrono.ChronoLocalDate, java.time.chrono.ChronoLocalDateTime,
java.time.chrono.ChronoZonedDateTime, java.time.Instant, java.time.OffsetDateTime, java.time.Year, java.time
.YearMonth|Checks whether the annotated date is in the future

|@Max(value=)|BigDecimal, BigInteger, byte, short, int, long and the respective wrappers of the primitive types|Checks
whether the annotated value is less than or equal to the specified maximum

|@Min(value=)|BigDecimal, BigInteger, byte, short, int, long and the respective wrappers of the primitive types|Checks
whether the annotated value is higher than or equal to the specified minimum

|@NotNull|Any type|Checks that the annotated value is not null.
|@Null|Any type|Checks that the annotated value is null

|@Past|java.util.Date, java.util.Calendar, java.time.chrono.ChronoLocalDate, java.time.chrono.ChronoLocalDateTime,
       java.time.chrono.ChronoZonedDateTime, java.time.Instant, java.time.OffsetDateTime, java.time.Year, java.time
       .YearMonth|Checks whether the annotated date is in the past

|@Pattern(regex=,flag=)|CharSequence|Checks if the annotated string matches the regular expression regex considering
the given flag match

|@Size(min=, max=)|CharSequence, Collection, Map and arrays|Checks if the annotated element's size is between min and
 max (inclusive)

|@Valid|Any non-primitive type|Performs validation recursively on the associated object. If the object is a
collection or an array, the elements are validated recursively. If the object is a map, the value elements are
validated recursively.

|===============

The default implementation of the validation service uses Hibernate Bean Validation and proposes additional useful
constraints. To have accessed to them you need to add the following dependency to your _pom.xml_ file:

[source, xml]
----
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-validator</artifactId>
    <version>${hibernateValidator.version}</version>
    <scope>provided</scope>
</dependency>
----

These additional constraints are:

[cols="4*", options="header"]
|===============
|Annotation
|Supported data types
|Use

|@CreditCardNumber(ignoreNonDigitCharacters=)
|CharSequence
|Checks that the annotated character sequence passes the
 Luhn checksum test. Note, this validation aims to check for user
 mistakes, not credit card validity! See also
 http://www.merriampark.com/anatomycc.htm[Anatomy of Credit Card Numbers]. ignoreNonDigitCharacters
 allows to ignore non digit characters. The default is +false+.

|@EAN
|CharSequence
|Checks that the annotated character sequence is a valid
link:$$http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29$$[EAN] barcode.
type determines the type of barcode. The default is EAN-13.

|@Email
|CharSequence
|Checks whether the specified character sequence is a valid email address. The optional parameters
regexp and flags allow to specify an additional regular expression (including regular expression
flags) which the email must match.

|@Length(min=, +
         max=)
|CharSequence
|Validates that the annotated character sequence is
              between min and
              max included

|@LuhnCheck(startIndex= , +
            endIndex=, +
            checkDigitIndex=, +
            ignoreNonDigitCharacters=)
|CharSequence
|Checks that the digits within the annotated character
sequence pass the Luhn checksum algorithm (see also
link:$$http://en.wikipedia.org/wiki/Luhn_algorithm$$[Luhn algorithm]). startIndex and
endIndex allow to only run the algorithm on
the specified sub-string. checkDigitIndex
allows to use an arbitrary digit within the character sequence
as the check digit. If not specified it is assumed that the
check digit is part of the specified range. Last but not least,
ignoreNonDigitCharacters allows to ignore
non digit characters.

|@Mod10Check(multiplier=, +
             weight=, +
             startIndex=, +
             endIndex=, +
             checkDigitIndex=, +
             ignoreNonDigitCharacters=)
|CharSequence
|Checks that the digits within the annotated character
sequence pass the generic mod 10 checksum algorithm.
multiplier determines the multiplier for
odd numbers (defaults to 3), weight the
weight for even numbers (defaults to 1).
startIndex and
endIndex allow to only run the algorithm on
the specified sub-string. checkDigitIndex
allows to use an arbitrary digit within the character sequence
as the check digit. If not specified it is assumed that the
check digit is part of the specified range. Last but not least,
ignoreNonDigitCharacters allows to ignore
non digit characters.

|@Mod11Check(threshold=, +
             startIndex=, +
             endIndex=, +
             checkDigitIndex=, +
             ignoreNonDigitCharacters=, +
             treatCheck10As=, +
             treatCheck11As=)
|CharSequence
|Checks that the digits within the annotated character
sequence pass the mod 11 checksum algorithm.
threshold specifies the threshold for the
mod11 multiplier growth; if no value is specified the multiplier
will grow indefinitely. treatCheck10As
and treatCheck11As specify the check
digits to be used when the mod 11 checksum equals 10 or 11,
respectively. Default to X and 0, respectively.
startIndex, endIndex
acheckDigitIndex and
ignoreNonDigitCharacters carry the same
semantics as in @Mod10Check.

|@NotBlank
|CharSequence
|Checks that the annotated character sequence is not null
and the trimmed length is greater than 0. The difference to
@NotEmpty is that this constraint can
only be applied on strings and that trailing white-spaces are
ignored.

|@NotEmpty
|CharSequence, Collection, Map and arrays
|Checks whether the annotated element is not null nor empty

|@Range(min=, +
        max=)
|BigDecimal, BigInteger, CharSequence, byte, short, int, long and the respective wrappers of the
primitive types
|Checks whether the annotated value lies between (inclusive) the specified minimum and maximum

|@SafeHtml(whitelistType= , +
           additionalTags=, +
           additionalTagsWithAttributes=)
|CharSequence
|Checks whether the annotated value
contains potentially malicious fragments such as <script/>. In order to use this
constraint, the
link:$$http://jsoup.org/$$[jsoup] library must be part of the class path.
With the whitelistType attribute a predefined whitelist type can be chosen which can
be refined via additionalTags or additionalTagsWithAttributes. The former allows to
add tags without any attributes, whereas the latter allows to specify tags and
optionally allowed attributes using the annotation @SafeHtml.Tag.

|@ScriptAssert(lang=, +
              script=, +
              alias=)
|Any type
|Checks whether the given script can successfully be
evaluated against the annotated element. In order to use this
constraint, an implementation of the Java Scripting API as
defined by JSR 223 ("Scripting for the
Java^TM^ Platform") must part of the
class path. The expressions to be evaluated can be written in
any scripting or expression language, for which a JSR 223
compatible engine can be found in the class path.

|@URL(protocol=, +
      host=, +
      port=, +
      regexp=, +
      flags=)
|CharSequence
|Checks if the annotated character sequence is a valid URL
according to RFC2396. If any of the optional parameters
protocol, host or
port are specified, the corresponding URL
fragments must match the specified values. The optional
parameters regexp and
flags allow to specify an additional
regular expression (including regular expression flags) which
the URL must match. Per default this constraint used the +java.net.URL+ constructor to
verify whether a given string represents a valid URL. A regular expression based version is also
available - +RegexpURLValidator+ - which can be configured via XML
(see <<section-mapping-xml-constraints>>) or a +ConstraintDefinitionContributor+
(see <<section-constraint-definition-contributor>>).

|===============


=== Extending the set of constraints

If the set of provided constraints is not enough, you can create your own constraints and validators. To implement
such custom constraints, follow the http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints-simple[Bean Validation guide]. However you should:

* put the annotation and its validator in the same package in the same bundle.
* export the package containing the annotation (and so the validator)


=== Internationalization

Constraints define a message. If this message is wrapped into `{}`, it is interpreted as a message key and the value
 is looked into the internationalization service (Check <<Internationalize your application>> for more details) as in:

[source, java]
----
include::{sourcedir}/controllers/validation/I18NValidationController.java[tags=controller]
----

Then the message is looked into the _resource bundles_:

[source, plain]
.src/main/resources/i18n/constraints.properties
----
include::{resourcedir}/i18n/constraints.properties[tags=content]
----

[source, plain]
.src/main/resources/i18n/constraints_fr.properties
----
include::{resourcedir}/i18n/constraints_fr.properties[tags=content]
----

So, Wisdom is picking the right message according to the request languages (passed into the `ACCEPT_LANGUAGE` header).
As you can see, messages can use variables to make the error more informative. For instance, in English the message
is _The name 'ts' must contain between 4 and 8 characters_, while on a browser using the French language, the message is
 _Le nom 'ts' doit contenir entre 4 et 8 caractères_. If the asked language is not available, default
(english) is used.

