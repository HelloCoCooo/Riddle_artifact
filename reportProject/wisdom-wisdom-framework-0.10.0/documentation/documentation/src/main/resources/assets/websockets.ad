== Web Sockets and SockJS

=== What are web sockets

WebSocket is a protocol providing full-duplex communication channels over a single TCP connection. The WebSocket
protocol was standardized by the IETF as RFC 6455 in 2011, and the WebSocket API in Web IDL is being standardized by
the W3C.

When a client (Browser) wants to establish a connection with a server using a web socket, it starts by a handshake.
Once done, a tunnel connects the client and the server. So, the server can push data to the
client and vice-versa. Such a mechanism paves the way to more reactive web applications, where
notifications and up to date data are pushed to the
client without having to rely on ajax or long polling.

WebSocket are identified using urls. These urls starts either by `ws://` or `wss://`.

=== Receiving data

A controller willing to listen for data sent by clients on a specific web socket has to use the `@onMessage` annotation:

[source, java, indent=0]
----
include::{sourcedir}/controllers/websockets/WebSocketController.java[tags=reception]
----

Every time a client sends data on `ws:///localhost:9000/socket`, the callback is called. Notice
the `@Body` annotation
 parsing the message to the parameter's type (here as String). The `@Body` annotation works the same way as in action
  methods:

[source, java, indent=0]
----
include::{sourcedir}/controllers/websockets/WebSocketController.java[tags=receptionWithJson]
----

The web socket URI provided in the `@OnMessage` annotation's parameter can contain a dynamic part
as for action methods:

[source, java, indent=0]
----
include::{sourcedir}/controllers/websockets/WebSocketController.java[tags=parameter]
----

The `@Parameter` annotation let you retrieve the dynamic parts.

Finally, you can identify the client sending the data using a special parameter named `client`:

[source, java, indent=0]
----
include::{sourcedir}/controllers/websockets/WebSocketController.java[tags=client]
----

IMPORTANT: Be aware that the `client` identifier changes if the user disconnects and reconnects.

=== Send data to a specific client

Now that we can receive data from the client, it would be nice to push data to it.

[source, java, indent=0]
----
include::{sourcedir}/controllers/websockets/WebSocketController.java[tags=send]
----

Two important things here:

* The `publisher` is a service (provided by Wisdom) responsible for sending data to web socket clients.
* We use the `send` method pushing data to a specific client

So, the previous snippet would produce such a kind of conversation:

----
client >>> hello >>> server
client <<< HELLO <<< server
----

=== Send data to all clients

The previous example sends data specifically to one client. However, data can be broadcast to all
 clients connected
to a specific web socket:

[source, java, indent=0]
----
include::{sourcedir}/controllers/websockets/WebSocketController.java[tags=publish]
----

The main difference is the usage of the `publish` method instead of `send`.

==== Sending Json or binary data

So far, we have only sent String messages. However, you can send or publish binary data too:

[source, java, indent=0]
----
include::{sourcedir}/controllers/websockets/WebSocketController.java[tags=binary]
----

By the way, notice that this method is not an `OnMessage` callback, but a method executed every hour.

You can also send JSON messages directly too:

[source, java, indent=0]
----
include::{sourcedir}/controllers/websockets/WebSocketController.java[tags=json]
----

=== Being notified of client connections and disconnections

In addition to `OnMessage`, there are two other annotations useful to know when clients connect and disconnect from
the listened socket:

[source, java, indent=0]
----
include::{sourcedir}/controllers/websockets/WebSocketController.java[tags=notification]
----

`@Opened` and `@Closed` callbacks can also use URI with dynamic parts too. To retrieve the identifier of the client,
just use `@Parameter("client")`.

////
=== SockJS

SockJS is a browser JavaScript library that provides a WebSocket-like object. SockJS gives you a coherent, cross-browser,
 Javascript API which creates a low latency, full duplex, cross-domain communication channel between the browser and the web
  server. It lets you emulate web socket like interactions on older browsers. See
  https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https[here] to check the
  compatibility.

Wisdom SockJS integration lets you use the very same development model (same annotations) as for web sockets for SockJS
application.

==== Declaring SockJS prefixes

Unlike WebSockets (and this is the only difference), the path that are handled by SockJS needs to be declared in the
`application.conf` file:

----
vertx {
  sockjs {
    prefixes : ["/chat"]
  }
}
----

Wisdom is reading the list of prefixes and create the adequate SockJS handler on the server side.

IMPORTANT: As you can see SockJS support is based on Vert.x

==== Receiving data from a SockJS socket

Once declared, your controllers can receive data sent from SockJS client:

[source, java]
----
@OnMessage("/chat")
public void onMessage(@Body Message message) {
    System.out.println("Receiving message : " + message.message);
}
----

It uses the same annotation as the web sockets.

==== Notifications on client connections and departures

As for the web sockets, you can use the `@Opened` and `@Closed` annotations to be notified when a client connects or
disconnects from a SockJS socket:

[source, java]
----
@Opened("/chat")
public void open(@Parameter("client") String client) {
	System.out.println("socket opened on /chat by " + client);
	publisher.send("/chat", client, "Welcome on the chat !");
}

@Closed("/chat")
public void close() {
	System.out.println("socket closed => /chat");
}
----

As you can see, the `client` parameter is also supported.

==== Sending data

Sending data to clients connected to SockJS follows the same way as for web socket, and so relies on the
`org.wisdom.api.http.websockets.Publisher` service. In the previous example, it sends a message to a specific client
using the `send` method, but you can also `publish` to broadcast a message to all connected clients:

[source, java]
----
@OnMessage("/chat")
public void onMessage(@Body Message message) {
    System.out.println("Receiving message : " + message.message);
    publisher.publish("/chat", json.toJson(message.message.toUpperCase()));
}
----

==== Using a SockJS socket in JavaScript

Now that the server is ready, let's see how the JavaScript client can connect to the SockJS support.

First, you need to import the SockJS JavaScript library. You can either use a CDN or a webjars:

[source, html]
----
<script src="//cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js"></script>
<!-- OR using a webjar -->
<script src="/libs/sockjs.min.js"></script>
----

If you choose the WebJar way, don't forget to add the following dependency to you `pom.xml` file:

[source, xml]
----
<dependency>
    <groupId>org.webjars</groupId>
    <artifactId>sockjs-client</artifactId>
    <version>0.3.4-1</version>
</dependency>
----

Once done, just create and use a SockJS object as follows:

[source, javascript]
----
var socket = new SockJS(window.location.origin + '/chat');

socket.onopen = function () {
	getTextAreaElement().value = "Socket opened!";
};

socket.onmessage = function (event) {
	appendTextArea(event.data);
};

socket.onclose = function () {
	appendTextArea("Socket closed");
};

function send(event) {
	event.preventDefault();
	var msg = {};
	msg.message = event.target.message.value;
	socket.send(JSON.stringify(msg));
}
----

That's all !

==== Handling clients using SockJS and Web Sockets

As the server side is identical, the same controller can handle clients using Web Sockets and SocketJS. First, don't
forget to declare the SockJS prefix in the `application.conf` file. Then, the web socket client uses the
`"ws://" + window.location.host + "/chat"` URL while the SockJS client uses the `window.location.origin + '/chat'`
URL (`/chat` is the prefix).

////





