== Extending the Wisdom Build Process

Wisdom lets you extend the build process and react to file updates to improve the development
experience. The Wisdom build system
 is based on Apache Maven, and so, to extend it you just implement a regular Maven Plugin, aka Mojo.

This section does not explain how to develop a regular Maven plugin. Refer to
https://maven.apache.org/plugin-developers/index.html[The Maven Mojo Developer Documentation] for further details.
However, it explains how your Mojo can participate in the _Wisdom Watch Mode_.

=== Rationale

We are often asked why we want a _Watch Mode_ based on Maven, and not something separated, as most
 of frameworks do.
This is because duplicating the build process creates a strange experience. The result looks
the same, but it
 may not really be the same. Debugging such kind of differences is almost impossible. So in Wisdom,
 Maven is the
 reference and the _Watch Mode_ is built on top of it. During the _Watch Mode_, Wisdom invokes the
 Maven Mojos
 directly.

This also means that using your Wisdom Build extension is just like using any other Maven plugin:
* add the plugin in the _pom.xml_ file
* configure it
* you're done!

=== From Mojo To Watcher

The _Wisdom Watch Mode_ is based on the concept of `Watcher`. A `Watcher` is an object who
is notified when a file, _accepted_ by the watcher, is created, updated or deleted.

So, first, in your Mojo's project, add the dependency on the `Wisdom-Maven-Plugin`:

[source,xml]
----
<dependency>
    <groupId>org.wisdom-framework</groupId>
    <artifactId>wisdom-maven-plugin</artifactId>
    <version>${project.version}</version>
</dependency>
----

To make your Mojo participate in the _Wisdom Watch Mode_, it needs to become a `Watcher` and
registers itself in the
 _watch pipeline_. In order to do that, the easiest way is to make your Mojo extend `AbstractWisdomWatcherMojo`
 instead of `AbstractMojo`.

TIP:  The `Pipeline` is the ordered sequence of _Watchers_ invoked in the _Watch Mode_. This list contains Mojo
instances (that are also _Watcher_). This list is collected during the _regular_ execution of your build. So the
order is the same as the Maven plugin's order.

By extending `AbstractWisdomWatcherMojo`, it automatically registers your Mojo to the _Pipeline_.

As a _Watcher_ your mojo has to implement the following methods:

[source,java]
----
    /**
     * Checks whether the given file is managed by the current watcher. Notice that implementation must not check
     * for the existence of the file as this method is also called for deleted files.
     *
     * @param file is the file.
     * @return {@literal true} if the watcher is interested in being notified on an event
     attached to the given file,
     * {@literal false} otherwise.
     */
    public boolean accept(File file);

    /**
     * Notifies the watcher that a new file is created.
     *
     * @param file is the file.
     * @return {@literal false} if the pipeline processing must be interrupted for this event. Most watchers should
     * return {@literal true} to let other watchers be notified.
     * @throws WatchingException if the watcher failed to process the given file.
     */
    public boolean fileCreated(File file) throws WatchingException;

    /**
     * Notifies the watcher that a file has been modified.
     *
     * @param file is the file.
     * @return {@literal false} if the pipeline processing must be interrupted for this event. Most watchers should
     * returns {@literal true} to let other watchers to be notified.
     * @throws WatchingException if the watcher failed to process the given file.
     */
    public boolean fileUpdated(File file) throws WatchingException;

    /**
     * Notifies the watcher that a file was deleted.
     *
     * @param file the file
     * @return {@literal false} if the pipeline processing must be interrupted for this event. Most watchers should
     * return {@literal true} to let other watchers be notified.
     * @throws WatchingException if the watcher failed to process the given file.
     */
    public boolean fileDeleted(File file) throws WatchingException;
----

The `accept` method let you select the file the watcher handles. For instance, if you want to
handle `.css` files, your `accept` method will be similar to:

[source,java]
----
@Override
public boolean accept(File file) {
    return
        (WatcherUtils.isInDirectory(file, WatcherUtils.getInternalAssetsSource(basedir))
            || (WatcherUtils.isInDirectory(file, WatcherUtils.getExternalAssetsSource(basedir)))
        )
        && WatcherUtils.hasExtension(file, "css");
    }
----

It first checks the location of the file. In this example, it checks that the file is either in the internal assets, i
.e. `src/main/resources/assets` or in the global assets (`src/main/assets`). Then, it checks for the
 file's extension. Notice that you must not check for the existence, as the `accept` method is
 also called for deleted file.

Once the `accept` method is implemented, you need to implement the:

* `fileCreated(File file)` : called when an _accepted_ file is created
* `fileUpdated(File file)` : called when an _accepted_ file is updated
* `fileDeleted(File file)` : called when an _accepted_ file is deleted

In general, the `fileCreated` and `fileUpdated` methods call the Mojo's main method (`execute`), while the
`fileDeleted` method cleans up generated files when the input file is deleted.

These methods return a boolean controlling the pipeline execution. If one of the method returns
`false`, the pipeline is interrupted, and none of the following watchers are called. In most cases,
 you need to return `true`.

=== Handling errors : the Watching Exceptions

As you may have noticed, the _Watcher_'s methods can throw `WatchingException`. `Watching Exceptions` let you
indicate an issue in the processing. A default error page is generated from this exception with
the message, of the guilty file, and if specified, the line and position of the error.

=== Initialization and Injection

As your Watcher is a Mojo and the _pipeline_ is reusing the Mojo's instances, all of the injected
parameters from your Mojo are still available. Notice that the `execute` method is called before
the Watcher's methods, meaning that you can do the required initialization there if required.

IMPORTANT: The pipeline is executed by one thread only (no parallel execution).

=== Disabling the _Watch Mode_

Maybe your Mojo is _skipped_. In that case you need to explicitly unregister it from the _pipeline_ by calling the
`removeFromWatching` method in your `execute` method.

=== Generating a Watcher using the Maven Archetype

We provide a Maven Archetype generating the project to develop your Watcher. Executes the following command to
generate it:

----
mvn org.apache.maven.plugins:maven-archetype-plugin:generate \
 -DarchetypeArtifactId=wisdom-simple-watcher-archetype \
 -DarchetypeGroupId=${project.groupId} \
 -DarchetypeVersion=${project.version} \
 -DgroupId=YOUR_GROUPID \
 -DartifactId=YOUR_ARTIFACTID \
 -Dversion=1.0-SNAPSHOT
----

=== Using Node and NPMs

Most of the Web Tools developed today are available as _NPM_ (i.e. Node's module). Fortunately, Wisdom provides a set
 of utility classes to install and execute NPM.

IMPORTANT: Wisdom has it's own _node_ version installed in `~/.wisdom/node/Node_Version`. So, the
NPMs you are installing and executing do not conflict with the user's ones. These NPM are installed in 
`~/.wisdom/node/Node_Version/lib/node_modules`.

IMPORTANT: The Wisdom's NPM support only work for executable NPM's.

To use a _NPM_ tool, declare a `NPM` object as follows:

[source,java]
----
NPM myNPM = npm(this, npm_name, version);
----

In most cases, declare your NPM object as a field, as both the _execute_ method and watcher's
method will invoke it. If
 the specified NPM is not install yet, it will install it (from https://www.npmjs.org/[NPM]).

It is a good practice to declare the NPM's version as a parameter, so the user can specify the version:

[source,java]
----
@Parameter(defaultValue = "0.3.4")
String version;
----

To execute the NPM, use:

[source,java]
----
myNPM.execute("exec", input.getAbsolutePath(), destination.getAbsolutePath() ...);
----

The `"exec"` argument is the name of the _command_ to launch. Available commands are available from the `package.json`
 files of the NPM, in the _bin_ part:

----
 "bin": {
     "myth": "bin/myth"
 },
----

The others arguments are the command's arguments. In the previous example the input and output paths.

So, for instance, here are the lines invoking the _myth_ processing:

[source,java]
----
try {
    int exit = myth.execute("myth", input.getAbsolutePath(), destination.getAbsolutePath());
    getLog().debug("Myth execution exiting with status: " + exit);
} catch (MojoExecutionException e) {
    throw new WatchingException("An error occurred during Myth processing of " + input.getAbsolutePath(), e);
}
----

The _CoffeeScript_ invocation is made by:

[source,java]
----
try {
    int exit = coffee.execute(COFFEE_SCRIPT_COMMAND, "--compile", "--map", "--output", out.getAbsolutePath(),
            input.getAbsolutePath());
    getLog().debug("CoffeeScript compilation exits with " + exit + " status");
} catch (MojoExecutionException e) {
    if (!Strings.isNullOrEmpty(coffee.getLastErrorStream())) {
        throw buildCompilationError(coffee.getLastErrorStream(), input);
    } else {
        throw new WatchingException(ERROR_TITLE, "Error while compiling " + input
                .getAbsolutePath(), input, e);
    }
}
----

In this last example, we retrieve the error stream (if any) and parse the error message to build a
`WatchingException` containing the compilation error, the guilty line and position.

=== Publishing your application in the Wisdom Extension Registry.

So you have made your very own extension for Wisdom and you want the world to see it? Great! You
can add it to the Wisdom Extension registry located link:/registry/dev[here].

In order to add your extension to the registry you need to create a Json file. This file will
contain the details about your extension such as the name, the project's homepage and so on.

It may be helpful to have information on your homepage on how to use your extension. Extensions
are generally used by either adding the extension as a dependency in a project's pom file, or as a
maven plugin.

Here is a quick overview of the structure for the json file.

----
{
    "name": "wisdom-monitor",
    "version":"0.6.2",
    "description": "The Wisdom monitor provides an administration interface letting you know the current status of the Wisdom server and deployed applications. This interface is modular and can be easily extended with your own views.",
 "repository": {
        "type": "git",
        "url": "https://github.com/wisdom-framework/wisdom/tree/master/extensions/wisdom-monitor"
    },

    "author": "The Wisdom Team",
    "license": {
            "type": "Apache",
            "url": "https://github.com/wisdom-framework/wisdom/blob/master/LICENSE.txt"
        },
    "homepage": "https://github.com/wisdom-framework/wisdom/tree/master/extensions/wisdom-monitor",
    "keywords": [
        "cpu usage",
        "system",
        "monitor" ,
        "memory",
        "threads",
        "bundles"
    ]
}
----

Required fields are: `name` - the name of your extension, this name must be unique; `version`,
`description`, and `homepage`.  The other fields are optional.

After you have have saved your Json file to a location accessible on the web, you can then enter
its url into the text box at the bottom of the registry page. (If you don't see the input box make
sure you're on the link:/registry/dev[developers view version]).

TIP: Currently to update your extension you just resubmit the url, in the same process you did for
adding it.

