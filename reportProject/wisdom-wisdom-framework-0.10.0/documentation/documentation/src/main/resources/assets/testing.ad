== Testing applications

Wisdom provides everything you need to test your application. More specifically, it supports:

* Unit tests - test your classes and action methods
* In-container integration tests - test your controllers and services on a running server
* Blackbox integration tests - emit HTTP request and check the results
* UI tests - check the web page exposed by your application
* JavaScript Testing - check you JavaScript code

To ease the development ot tests, Wisdom provides http://joel-costigliola.github.io/assertj[AssertJ],
http://ow2-chameleon.github.io/osgi-testing-helpers/apidocs/index.html[OSGi Testing Helpers] for in-container tests,
a HTTP fluent API for blackbox tests, and https://github.com/FluentLenium/FluentLenium[FluentLenium] for UI tests.

JavaScript code relies on http://karma-runner.github.io/[Karma] and can be executed during the (unit) _test_ phase or
 _integration-test_ phase.

IMPORTANT: By default, tests are looking for a free port. So don't worry about configuring the port used by your
tests. You can configure the used port by setting it explicitly with the `http.port` system
property.

=== Unit Tests

The unit test support lets you write Junit tests to check the behavior of your classes. These
tests cases are written
in Java classes in the `src/test/java` folder. Notice that test case classes must start or end with `Test` (this is
 a Surefire convention).

Unit tests should extend the `WisdomUnitTest` class to access utility methods.

[source,java,indent=0]
----
include::{testdir}/unit/UnitTest.java[tags=unit]
----

The first test is a really simple test just checking that 1+1=2. Notice the AssertJ syntax.

The second test checks the behavior of one of your action methods. As your action method can
access the HTTP method,
the call is wrapped into an `Invocation` call:

[source,java,indent=0]
----
Action.ActionResult result = action(new Invocation() {
    @Override
    public Result invoke() throws Throwable {
        return simple.index();
    }
}).invoke();
----

Such a pattern lets you call your action directly, and retrieve the HTTP result. You can also
configure the HTTP
headers, parameters, form attributes, cookies, session.... The chain must end with `invoke()`

[source,java,indent=0]
----
Action.ActionResult result = action(new Invocation() {
    @Override
    public Result invoke() throws Throwable {
        return simple.index();
    }
}).parameter("name", "clement").header("Accept", "text/html").invoke();
----

The `ActionResult` contains the HTTP Context (that may have been modified by your action method, and the HTTP result.

=== In-Container Tests

In-container tests let you check the behavior of your controller and services running in the server. The server is
automatically launched. These tests cases are written in Java classes in the `src/test/java`
folder. Notice that test
case classes must start or end with "IT" (this is a Surefire/Failsafe convention).

In-container tests must extend `WisdomTest`, and follow the same rules as unit tests. However, `@Inject` annotated
fields are injected.

[source,java,indent=0]
----
include::{testdir}/unit/InContainerIT.java[tags=IT]
----

The `@Inject` annotation lets you access the real instance of your controller, service or template:

----
// Controller injection:
@Inject
HelloController controller;

// Service injection:
@Inject
private Validator validator;

// The OSGi bundle context
@Inject
private BundleContext context;
----

Once injected your test can invoke them either directly or in an invocation block to configure the HTTP context.

IMPORTANT: the same server instance is used for all your tests.

=== BlackBox Tests

Black box tests are emitting HTTP requests and retrieving the result. Such tests are not executed
 in the server. Your application is deployed within the server (it reuses the launched one by
 in-container tests if it's already running).

As for in-container tests, a black box test class must start or end with "IT". These classes must
extend
`org.wisdom.test.parents.WisdomBlackBoxTest`.

[source,java,indent=0]
----
include::{testdir}/unit/BlackBoxIT.java[tags=IT]
----

The test API lets you emit any type of HTTP requests and configure headers, payload, cookies...
In addition, the response can be smoothly wrapped to Json Node, HTML Document (JSoup), String, or  input stream.

If your blackbox test requires controllers or services from your test sources (i.e. located in the `src/test/java`
directory), you need to use `@BeforeClass` and `@AfterClass` as follows:

[source, java]
----
@BeforeClass
public static void init() throws BundleException {
    installTestBundle();
}

@AfterClass
public static void cleanup() throws BundleException {
    removeTestBundle();
}
----

Notice that the methods have to be static. The invoked bundles are located in `org.wisdom.test.parents
.WisdomBlackBoxTest`.

=== FluentLenium Tests

UI Tests are loading pages using a browser and check the elements present on the page. Wisdom uses FluentLenium to
ease the implementation of UI tests.

As for in-container tests, UI test classes must start or end with "IT". These classes must extend
`org.wisdom.test.parents.WisdomFluentLeniumTest`.

[source,java,indent=0]
----
include::{testdir}/unit/UIIT.java[tags=IT]
----

You can select the browser to use by setting the `-Dfluentlenium.browser` property in the command line. Accepted
values are `firefox, chrome, ie (Internet Explorer) and safari`. If not set it uses the `HTML Unit Browser`
(Fluentlenium's default) relying on Firefox.

Notice that depending on the browser you choose you may have to install additional software or specify addition values.
Check the following links:

* https://code.google.com/p/selenium/wiki/InternetExplorerDriver[Internet Explore Driver].
* https://code.google.com/p/selenium/wiki/ChromeDriver[Chrome Driver].
* https://code.google.com/p/selenium/wiki/SafariDriver[Safari Driver].
* https://code.google.com/p/selenium/wiki/FirefoxDriver[Firefox Driver].


=== Stopping the server instance

When building a Maven multi-module project, the same instance of the server is used for all your
tests. This can be
annoying. Fortunately, Wisdom provides a test listener to stop the instance once the module build is completed:

[source,xml,indent=0]
----
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-failsafe-plugin</artifactId>
<version>2.18</version>
<executions>
    <execution>
        <goals>
            <goal>integration-test</goal>
            <goal>verify</goal>
        </goals>
        <configuration>
            <properties>
                <property>
                    <name>listener</name>
                    <value>org.wisdom.test.WisdomRunListener</value>
                </property>
            </properties>
        </configuration>
    </execution>
</executions>
</plugin>
----

The previous configuration is automatically generated when creating a new project.

=== JavaScript tests

To test your JavaScript code, Wisdom integrates Karma, a test runner executing the code in a real or emulated browser
. Karma test can be executed either during the _test_ phase, or during the _integration-test_ phase. In both case you
 need a Karma configuration file located in the `src/test/javascript` directory, in which your JavaScript tests will
 also be.

Karma relies on a set of plugins that you must configure from your `pom.xml` file:

[source, xml]
----
<karmaPlugins>
    <plugin>karma-jasmine,0.1.5</plugin>
    <plugin>karma-phantomjs-launcher,0.1.1</plugin>
    <plugin>karma-junit-reporter</plugin>
</karmaPlugins>
----

This list indicates the name of the plugin and its version (optional).

==== Unit Tests

Unit tests are configured in the `src/test/javascript/karma.conf.js` file. Here is an example:

[source,javascript]
----
module.exports = function(config) {
    config.set({
        basePath: "\${basedir}",
        frameworks: ['jasmine'],
        files: [
            '\${project.build.outputDirectory}/assets/square.js',
            'src/test/javascript/*Spec.js'
        ],
        exclude: ['src/test/javascript/karma.conf*.js'],
        port: 9876,
        logLevel: config.LOG_INFO,
        browsers: ['PhantomJS'],
        singleRun: true,
        plugins: [
            'karma-jasmine',
            'karma-phantomjs-launcher',
            'karma-junit-reporter'
        ],
        reporters:['progress', 'junit'],
        junitReporter: {
            outputFile: 'target/surefire-reports/karma-test-results.xml',
            suite: ''
        }
    });
};
----

You can find more details about the configuration file
http://karma-runner.github.io/0.12/config/configuration-file.html[here].

TIP: The configuration file is filtered, meaning you can use Maven properties such as `${basedir}`.


WARNING: The set of plugins listed in the configuration must have been listed in the `karmaPlugins` parameter in the
`pom.xml` file.

WARNING: `singleRun` must be set to `true`.

TIP: using the `junitReporter` allow retrieving the Karma tests in your continuous integration server such as Jenkins.

Once you have this configuration file, you can write JavaScript unit test. Here is an example using Jasmine:

[source, javascript]
----
// squareSpec.js

describe('The square function', function(){
    it('should square a number', function(){
        expect(square(3)).toBe(9);
    });
});

describe('true is true', function() {
   it('should be true', function() {

   });

    it('should be true 2', function() {
         expect(true).toBe(true);
    });
});
----

==== Integration Tests

Unlike unit tests, integrationt ests need to be enabled in your Maven `pom.xml` file:

[source, xml]
----
<executions>
  <execution>
    <id>javascript-it</id>
    <goals>
      <goal>test-javascript-it</goal>
    </goals>
    <phase>integration-test</phase>
  </execution>
</executions>
----

The Karma integration tests are configured in the `src/test/javascript/karma.conf-it.js` file. This file is also
filtered, and in addition to the Maven properties can rely on:

* `hostname`: the local server
* `httpPort`: the HTTP port
* `httpsPorts`: the HTTPS port

So, the `proxies` configuration can be like:

[source, javascript]
----
module.exports = function(config) {
    config.set({
        basePath: "\${basedir}",
        frameworks: ['jasmine'],
        files: [
            '\${project.build.outputDirectory}/assets/square.js',
            'src/test/javascript/*Spec.js'
        ],
        exclude: ['src/test/javascript/karma.conf*.js'],
        port: 9876,
        logLevel: config.LOG_INFO,
        browsers: ['PhantomJS'],
        singleRun: true,
        proxies: {
            '/': 'http://\${hostname}:\${httpPort}'
        },
        plugins: [
            'karma-jasmine',
            'karma-phantomjs-launcher',
            'karma-junit-reporter'
        ],
        reporters:['progress', 'junit'],
        junitReporter: {
            outputFile: 'target/surefire-reports/karma-IT-results.xml',
            suite: ''
        }
    });
};
----

To run integration tests, Wisdom starts your application and then launch Karma tests. So, you can load pages and
executes Ajax calls.

==== Watch Mode

Karma **unit** tests are executed, in watch mode, every time you change a `.js` file. Errors are reported in the
browser.

==== Skipping tests

You can skip tests using the `-DskipTests` flag in the Maven command line.

