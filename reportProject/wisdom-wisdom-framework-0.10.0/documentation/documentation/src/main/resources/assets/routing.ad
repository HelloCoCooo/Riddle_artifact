== The HTTP request router

The router is the component that translates each incoming HTTP request to an action call. The HTTP request contains two major pieces of information:

1. the request path (such as `/foo/1234`, `/photos/`), including the query string (the part after the `?` in the url).
2. the HTTP method (GET, POST, ...).

Routes are defined directly on the action method with the `@Route` annotation.

=== The @Route annotation

The `@Route` annotation contains two attributes: the HTTP method and the URI pattern determining on which URLs the action is associated.

Let's see a couple of examples:

[source, java]
----
@Route(method=HttpMethod.GET, uri="/photos")
@Route(method=HttpMethod.GET, uri="/photos/{id}")
@Route(method=HttpMethod.POST, uri="/photos/")
@Route(method=HttpMethod.DELETE, uri="/photos/{id}")
----

=== The HTTP method
The HTTP method can be any of the valid methods supported by HTTP (mainly GET, POST, PUT,
DELETE). They are defined in `org.wisdom.api.http.HttpMethod`.

=== The URI pattern
The URI pattern defines the routeâ€™s request path. Some parts of the request path can be dynamic.

==== Static path
For example, to exactly match `GET /photos` incoming requests, you can define this route:

[source, java]
----
@Route(method=HttpMethod.GET, uri="/photos")
----

==== Dynamic parts
If you want to define a route that, say, retrieves a photo by id, you need to add a dynamic part, filled by the router:

[source, java]
----
@Route(method=HttpMethod.GET, uri="/photos/{id}")
----

NOTE: URI patterns may have more than one dynamic part such as in `/foo/{id}/{name}`.

The default matching strategy for a dynamic part is defined by the regular expression defined as `{id}` will match
exactly one URI path segment.

==== Dynamic parts spanning several path segments
If you want a dynamic part to capture more than one URI path segment, separated by slashes, you can define a dynamic
part using the `{path*}` syntax:

[source, java]
----
@Route(method=HttpMethod.GET, uri="/assets/{path*}")
----

Here, for a request like `GET /assets/stylesheets/style.css`, the name dynamic part will capture the
`stylesheets/style.css` value.

NOTE: `{path*}` scheme accepts empty input. To avoid this, use `{path{plus}}`.

==== Dynamic parts with custom regular expressions
You can also define your own regular expression for a dynamic part, using the `{id<regex>}` syntax:

[source, java]
----
@Route(method=HttpMethod.GET, uri="/photos/{id<[0-9]+>}")
----

=== Controller's path
Often the actions of one controller starts with a common prefix, such as `/photos`. To avoid the repetition,
you can use the `@Path` annotation indicating the common prefix prepended to all uris from the `@Route`.

[source, java]
----
include::{sourcedir}/controllers/PhotoController.java[tags=controller]
----

=== Action Parameters
Action methods can receive parameters. Several types of parameters are supported:

1. parameter from the query part of the url or from the dynamic part of the uri. These parameters are annotated
 with `@Parameter`, `@QueryParameter` and `@PathParameter`
2. fields from form are annotated with `@FormParameter`. It's also used for file upload.
3. object built from the request body (for `POST` requests). These parameters are annotated with `@Body`
4. `@HttpParameter` injects an object extracted from the incoming request such as a header, request scope data, the HTTP
context, the request and cookies.
5. `@BeanParameter` injects an instance of a class using the other annotations.

All action method parameters must be annotated with one of the above annotations.

==== Types

Before going further, let's see what types are supported. The type is extracted from the
annotated argument (i.e. formal parameter). So in `@Parameter("param") String p`, it would be
`java.lang.String`, while in `@Parameter("params") List<String> p`, it would be a
`java.util.List<String>`.

Wisdom supports:

* String
* Primitive types
* Classes having a constructor with a single String argument
* Classes having a `valueOf` static method with a single String argument (so support enumeration)
* Classes having a `from` static method with a single String argument
* Classes having a `fromString` static method with a single String argument
* Any type with a `org.wisdom.api.content.ParameterConverter` service handling it
* Array, List and Set containing previously listed types

Boolean's values are extended. Are considered as 'true': "true", "on", "yes", "1". Other strings are considered as
'false'.

If you want to extend such support, you just have to implement `org.wisdom.api.content.ParameterConverter` and expose
 it as a service.

==== @Parameter, @QueryParameter and @PathParameter

The `@Parameter` annotation indicates that the marked method parameter takes a value from either the query part of
the method, or a dynamic part of the URI.

In the following example, the `id` value is computed from the URL. For instance,
`http://localhost:9000/parameters/foobar` would set id to `foobar`.

[source, java]
----
include::{sourcedir}/controllers/Parameters.java[tags=path-parameter]
----

Using query parameter is also simple:

[source, java]
----
include::{sourcedir}/controllers/Parameters.java[tags=query-parameter]
----

With the previous snippet, and the URL `http://localhost:9000/parameters/?id=foo`, `id` would be set to `foo`.

When bound to an array type, Wisdom collects the values of the given parameter name in the query part of the request.
 It builds an array injectable as follows:

[source, java]
----
@Parameter("ids") List<Integer> ids,
@Parameter("names") String ns[]
----

If the parameter has no values, an empty array or list is injected.

`@Parameter` can receive a _default value_ (except if the parameter is deduced from the path):

[source, java]
----
@Parameter("id") @DefaultValue("0") int id,
@Parameter("ids") @DefaultValue("0, 1") int[] ids
----

The default value is a String representation of the value to use if there are no values. For collections and arrays,
the default value is interpreted as a comma-separated list.

If you want to enforce the origin of the value you can use the `@PathParameter` and `@QueryParameter` annotation
to select the value respectively from the path or query.

IMPORTANT: `@DefaultValue` cannot be used with `@PathParameter`.


==== @FormParameter

the `@FormParameter` annotation retrieves values sent from HTML forms.

[source, java]
----
include::{sourcedir}/controllers/Attributes.java[tags=attributes]
----

In the previous snippet, two attributes can be received by the action method: `id` and `name`. A
form sending such data as `application/x-www-form-urlencoded` will be handled directly.


When bound to an array type or a collection, Wisdom collects the values of the given attribute. It
builds an injectable object (array or collection) as follows:

[source, java]
----
@FormParameter("ids") List<Integer> ids,
@FormParameter("names") String ns[]
----

If the attribute has no values, an empty array or collection is injected.

`@FormParameter` can receive a _default value_:

[source, java]
----
@FormParameter("id") @DefaultValue("0") int id,
@FormParameter("ids") @DefaultValue("0, 1") int[] ids
----

The default value is a String representation of the value to use if there are no values. For collections and arrays,
the default value is interpreted as a comma-separated list.

==== @Body

The `@Body` annotation lets you wrap the request into an object. This object must be either a
bean or have `public` attributes.

For instance, let's imagine you need to manage an instance of the following class:

[source, java]
----
include::{sourcedir}/controllers/MyData.java[tags=data]
----

You don't want to build your instance by yourself, luckily Wisdom handles that for you:

[source, java]
----
include::{sourcedir}/controllers/BodyWrap.java[tags=controller]
----

The `@Body` annotation builds an object of the parameter's type using the request content and
parameters. It becomes very handy when handling JSON data, or complex form.

NOTE: Parsing from JSON and XML support parameterized type as: `@Body List<String> list`, or `@Body Data<Person> data`. However, parameterized types are not supported when retrieving a form.


==== @HttpParameter

The `@HttpParameter` annotation let you inject HTTP related data such as the `Request`, the `Context`, HTTP header's
value...

[source, java]
----
@Route(method = HttpMethod.GET, uri = "/parameter/http")
    public Result http(
      @HttpParameter Context context, // HTTP Context
      @HttpParameter Request request, // Incoming Request
      @HttpParameter("X-header") String header, // Header value
      @HttpParameter SessionCookie session, // Session
      @HttpParameter Stuff stuff) { // Custom object (invoke a factory service)
    //...
                       }
----

The type of the parameter determines the injected value:

* the HTTP `Context` - `org.wisdom.api.http.Context`
* the HTTP `Request` - `org.wisdom.api.http.Request`
* a `Cookie` object (cookie's name given in parameter) - `org.wisdom.api.cookies.Cookie`
* the `Session` object (Session cookie) - `org.wisdom.api.cookies.SessionCookie`
* the `Flash` object (Flash cookie) - `org.wisdom.api.cookies.FlashCookie`
* the invoked `Route` - `org.wisdom.api.router.Route`
* a `Reader` object to read the request body

If the type does not match one of the previous case:

1. if a `org.wisdom.api.content.ParameterFactory` service handling the parameter's type is available, it invokes it.
2. if a HTTP header has the name given in the annotation parameter, it injects the header value
3. otherwise it looks into the _request scope_ to check whether a filter or interceptor has provided a value with the
 name given in the annotation parameter.

==== @BeanParameter

The last annotation lets you build a bean using any of the other annotations presented here. The
bean's class must:

* have a _no-args_ constructor, or a constructor using the other annotations.
* have setter methods (starting with _set_), having only one parameter, and this parameter must
be annotated with one of the other annotations (it can also use the `@DefaultValue` annotation).

Let's see an example of such a bean:

[source, java]
----
include::{sourcedir}/controllers/Bean.java[tags=data]
----

An instance of this bean is going to be created when the following action method is invoked:

[source, java]
----
include::{sourcedir}/controllers/BeanExample.java[tags=controller]
----

The `@BeanParameter` also handles nested beans.

=== Validation

The action method parameter can be validated using the http://beanvalidation.org[Bean Validation Annotations]. It
lets you express constraints on object models via annotations.

Here are some examples:

[source, java]
----
include::{sourcedir}/controllers/validation/ValidationController.java[tags=controller]
----

Thanks to these annotation, you don't have to validate your parameter manually. If the constraints a violated, Wisdom
 returns a `bad request` JSON answer:

----
[{"message":"id must be defined","path":"actionWithValidatedParams.arg0"}]
----

or

----
[{
"message": "size must be between 4 and 8"
"invalid": "xx"
"path": "actionWithValidatedBody.arg0.name"
}]
----

==== Using Hibernate Validation constraints

Wisdom uses the Hibernate Validation implementation defining more constraints (such as `@Email`). You can rely on
these constraints by adding the following dependency in your `pom.xml` file:

[source, xml]
----
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-validator</artifactId>
    <version>${hibernateValidator.version}</version>
    <scope>provided</scope>
</dependency>
----

==== Manual validation of forms

If you want to run the validation yourself and customize the response, you can decide to run the _validation_ process
 yourself:

[source, java]
----
include::{sourcedir}/controllers/validation/ManualValidationController.java[tags=controller]
----

==== Internationalized validation message

Validation constraints have a `message` parameter that lets you specify the message. Instead of a message, you can
use a _message key_ that will be picked among the available locales. Message keys are wrapped into `{}` as in:

[source, java]
----
include::{sourcedir}/controllers/validation/I18NValidationController.java[tags=controller]
----

Then, creates the _resource bundle_ files in `src/main/resources/i18n` such as:

[source]
.constraints.properties
----
include::{resourcedir}/i18n/constraints.properties[tags=content]
----

for the default (english) languages, and files containing the translations as:

[source]
.constraints_fr.properties
----
include::{resourcedir}/i18n/constraints_fr.properties[tags=content]
----

So, Wisdom is picking the right message according to the request languages (passed into the `ACCEPT_LANGUAGE` header).
 As you can see, messages can use variables to make the error more informative. For instance, in English the message
 is _The name 'ts' must contain between 4 and 8 characters_, while on a browser using the French language, the
 message is _Le nom 'ts' doit contenir entre 4 et 8 caractÃ¨res_. If the asked language is not available, default
 (english) is used.

These files are part of the internationalization support. Check <<Internationalize your application>> for more details.

=== Declaring routes without @Route

If for some reasons, the `@Route` annotation does not meet your requirements, you can override the
 `routes()` method. This method lets you define a set of routes. These routes are *not* prefixed
 by the `@Path` prefix, and can target other controllers.

[source, java, indent=0]
----
include::{sourcedir}/controllers/Routes.java[tags=routes]
----

Wisdom provides a `RouteBuilder` that lets you define `Route` easily.

=== Route Conflict

Because there is no central location where routes are defined (as it breaks modularity),
conflict may happen. Wisdom tries to detect them when the application is deployed, however,
the detection algorithm is limited. We recommend using different prefixes (one per application) to
avoid conflicts.

=== Accessing the router

The Wisdom router is exposed as an OSGi service. Don't worry it does not bite. Your controller can access it as
follows:

[source, java]
----
include::{sourcedir}/controllers/RouterExample.java[tags=router]
----

The router lets you find routes by yourself, invoke them, check their parameters... In addition,
it supports _reverse routing_.

IMPORTANT: Wisdom is based on http://ipojo.org[Apache Felix iPOJO]. All iPOJO features are available in Wisdom.

=== Reverse routing
The router can be used to generate a URL from within your code. Thus, refactoring is made easier.

[source, java]
----
include::{sourcedir}/controllers/RouterExample.java[tags=reverse]
----

Invoking the defined action returns:
----
/photo/
/photo/1
----

Reverse routing can let you generate redirect results on actions you don't know the url:

[source, java]
----
include::{sourcedir}/controllers/RouterExample.java[tags=redirect]
----



